* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.container {
  /*
  [ Hiding overflow ]
  Clearing floats only fixes the height issue when there’s an element inside the container element that 
  we can add a clear property to. Now that our footer is outside .page, we need a new way to make floated elements 
  contribute to the height of their container.

  Diagram: clearing with child (clear: both on child element) versus clearing  with parent (overflow: hidden on parent)
  The solution is the CSS overflow property. By adding an overflow: hidden declaration to a container div, we’re telling it 
  to recognize the height of any floated elements it contains. This is how we can add a background color to our .page element 
  and have it actually render:
  */
  overflow: hidden;             /* Add this */  
}

.page {
  width: 900px;
  margin: 0 auto;
  background-color: #EAEDF0;    /* Add this */
  border: 1px solid red;  
}

.menu {
  height: 100px;
  background-color: #B2D6FF;    /* Medium blue */
}

.sidebar {
  float: left;
  width: 200px;
  height: 300px;
  background-color: #F09A9D;
}

.content {
  float: left;
  width: 650px;
  height: 500px;
  background-color: #F5CF8E;
  padding: 20px;
}

/*
  [ Floats for content ]
  We’ve got an image and several paragraphs that we can style just like our structural divs. 
  For example, let’s create a magazine-style layout by floating the image and letting the text flow around it. 
  Add a couple more rules to our stylesheet:
*/
.article-image {
  float: left;
  width: 300px;
  height: 200px;
  margin-right: 20px;
  margin-bottom: 20px;
}

p {
  margin-bottom: 20px;
}

.footer {
  overflow: hidden;             /* Add this */  
  background-color: #D6E9FE;
  clear: both;
}

.footer-item {
  /*
  [ A brief note on naming conventions ]
  You can use this same technique to make grids of any size. For example, creating a photo gallery with a bunch of thumbnails 
  is simply a matter of putting the grid items in .page instead of the footer and adding <img/> elements to them. 
  But, again, remember that flexbox is a more modern way to create these kinds of layouts.
  */
/*.column {*/
  float: left;
  width: 31%;
  margin: 20px 1.15%;
  height: 160px;
  background-color: #B2D6FF;    /* Medium blue */
}

.avatar {
  float: left;
  width: 60px;
  height: 60px;
  margin: 25px;
  border-radius: 40px;
  background-color: #D6E9FE;
}

.username {
  margin-top: 30px;
}

.comment {
  margin: 10px;
  /*
  This highlights another use case for our overflow: hidden trick. Sticking it on our .comment box made sure that 
  the text “horizontally cleared” (that’s not a technical term) the floated image. Without it, the last line of the .comment text 
  would hang underneath the image.  
  */
  overflow: hidden;  /* This is important */
}